/**
 * @fileOverview 删除工具
 * @name delTools.js
 * @description 删除导出文件 工具文件及模块文件夹  测试文件和文件夹
 * @type {{lutimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, realpath: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void}, readFileSync: {(path: PathOrFileDescriptor, options?: ({encoding?: null | undefined, flag?: string | undefined} | null)): Buffer, (path: PathOrFileDescriptor, options: ({encoding: BufferEncoding, flag?: string | undefined} | BufferEncoding)): string, (path: PathOrFileDescriptor, options?: ((ObjectEncodingOptions & {flag?: string | undefined}) | BufferEncoding | null)): (string | Buffer)}, ReadSyncOptions: ReadSyncOptions, rmdir: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmDirOptions, callback: NoParamCallback): void}, mkdtemp: {(prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void, (prefix: string, options: ("buffer" | {encoding: "buffer"}), callback: (err: (NodeJS.ErrnoException | null), folder: Buffer) => void): void, (prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: (string | Buffer)) => void): void, (prefix: string, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void}, ObjectEncodingOptions: ObjectEncodingOptions, WatchOptions: WatchOptions, StatWatcher: StatWatcher, ReadAsyncOptions: ReadAsyncOptions, lstatSync: StatSyncFn, truncate: {(path: PathLike, len: (number | undefined | null), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, PathLike: string | Buffer | URL, WatchEventType: "rename" | "change", readSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (ReadPosition | null)): number, (fd: number, buffer: NodeJS.ArrayBufferView, opts?: ReadSyncOptions): number}, write: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, (fd: number, string: string, position: (number | undefined | null), encoding: (BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void}, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true}), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, options: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null | undefined), callback: NoParamCallback): void, (path: PathLike, options: (Mode | MakeDirectoryOptions | null | undefined), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, callback: NoParamCallback): void}, promises: {lutimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>, (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>}, realpath: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}, FileHandle: FileHandle, FileReadResult: FileReadResult, rmdir: {(path: PathLike, options?: RmDirOptions): Promise<void>, (path: PathLike, options?: RmDirOptions): Promise<void>}, CreateWriteStreamOptions: CreateWriteStreamOptions, mkdtemp: {(prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (prefix: string, options: BufferEncodingOption): Promise<Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (prefix: string, options: BufferEncodingOption): Promise<Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}, truncate: {(path: PathLike, len?: number): Promise<void>, (path: PathLike, len?: number): Promise<void>}, FlagAndOpenMode: FlagAndOpenMode, constants: {F_OK: number, R_OK: number, W_OK: number, X_OK: number, COPYFILE_EXCL: number, COPYFILE_FICLONE: number, COPYFILE_FICLONE_FORCE: number, O_RDONLY: number, O_WRONLY: number, O_RDWR: number, O_CREAT: number, O_EXCL: number, O_NOCTTY: number, O_TRUNC: number, O_APPEND: number, O_DIRECTORY: number, O_NOATIME: number, O_NOFOLLOW: number, O_SYNC: number, O_DSYNC: number, O_SYMLINK: number, O_DIRECT: number, O_NONBLOCK: number, S_IFMT: number, S_IFREG: number, S_IFDIR: number, S_IFCHR: number, S_IFBLK: number, S_IFIFO: number, S_IFLNK: number, S_IFSOCK: number, S_IRWXU: number, S_IRUSR: number, S_IWUSR: number, S_IXUSR: number, S_IRWXG: number, S_IRGRP: number, S_IWGRP: number, S_IXGRP: number, S_IRWXO: number, S_IROTH: number, S_IWOTH: number, S_IXOTH: number, UV_FS_O_FILEMAP: number}, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): Promise<string | undefined>, (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): Promise<void>, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): Promise<string | undefined>, (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): Promise<string | undefined>, (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): Promise<void>, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): Promise<string | undefined>}, chown: {(path: PathLike, uid: number, gid: number): Promise<void>, (path: PathLike, uid: number, gid: number): Promise<void>}, opendir: {(path: PathLike, options?: OpenDirOptions): Promise<Dir>, (path: PathLike, options?: OpenDirOptions): Promise<Dir>}, rm: {(path: PathLike, options?: RmOptions): Promise<void>, (path: PathLike, options?: RmOptions): Promise<void>}, copyFile: {(src: PathLike, dest: PathLike, mode?: number): Promise<void>, (src: PathLike, dest: PathLike, mode?: number): Promise<void>}, appendFile: {(path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)): Promise<void>, (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)): Promise<void>}, access: {(path: PathLike, mode?: number): Promise<void>, (path: PathLike, mode?: number): Promise<void>}, readlink: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | string | null)): Promise<string | Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | string | null)): Promise<string | Buffer>}, CreateReadStreamOptions: CreateReadStreamOptions, link: {(existingPath: PathLike, newPath: PathLike): Promise<void>, (existingPath: PathLike, newPath: PathLike): Promise<void>}, utimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>, (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>}, readdir: {(path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[]>, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Promise<Buffer[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[] | Buffer[]>, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Promise<Dirent[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[]>, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Promise<Buffer[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[] | Buffer[]>, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Promise<Dirent[]>}, symlink: {(target: PathLike, path: PathLike, type?: (string | null)): Promise<void>, (target: PathLike, path: PathLike, type?: (string | null)): Promise<void>}, chmod: {(path: PathLike, mode: Mode): Promise<void>, (path: PathLike, mode: Mode): Promise<void>}, writeFile: {(file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)): Promise<void>, (file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)): Promise<void>}, FileReadOptions: FileReadOptions, stat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>, (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, lstat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>, (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, statfs: {(path: PathLike, opts?: (StatFsOptions & {bigint?: false | undefined})): Promise<StatsFs>, (path: PathLike, opts: (StatFsOptions & {bigint: true})): Promise<BigIntStatsFs>, (path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>, (path: PathLike, opts?: (StatFsOptions & {bigint?: false | undefined})): Promise<StatsFs>, (path: PathLike, opts: (StatFsOptions & {bigint: true})): Promise<BigIntStatsFs>, (path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>}, cp: {(source: (string | URL), destination: (string | URL), opts?: CopyOptions): Promise<void>, (source: (string | URL), destination: (string | URL), opts?: CopyOptions): Promise<void>}, FileChangeInfo: FileChangeInfo, unlink: {(path: PathLike): Promise<void>, (path: PathLike): Promise<void>}, watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")): AsyncIterable<FileChangeInfo<Buffer>>, (filename: PathLike, options?: (WatchOptions | BufferEncoding)): AsyncIterable<FileChangeInfo<string>>, (filename: PathLike, options: (WatchOptions | string)): (AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>), (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")): AsyncIterable<FileChangeInfo<Buffer>>, (filename: PathLike, options?: (WatchOptions | BufferEncoding)): AsyncIterable<FileChangeInfo<string>>, (filename: PathLike, options: (WatchOptions | string)): (AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>)}, rename: {(oldPath: PathLike, newPath: PathLike): Promise<void>, (oldPath: PathLike, newPath: PathLike): Promise<void>}, readFile: {(path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)): Promise<Buffer>, (path: (PathLike | FileHandle), options: (({encoding: BufferEncoding, flag?: OpenMode | undefined} & Abortable) | BufferEncoding)): Promise<string>, (path: (PathLike | FileHandle), options?: ((ObjectEncodingOptions & Abortable & {flag?: OpenMode | undefined}) | BufferEncoding | null)): Promise<string | Buffer>, (path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)): Promise<Buffer>, (path: (PathLike | FileHandle), options: (({encoding: BufferEncoding, flag?: OpenMode | undefined} & Abortable) | BufferEncoding)): Promise<string>, (path: (PathLike | FileHandle), options?: ((ObjectEncodingOptions & Abortable & {flag?: OpenMode | undefined}) | BufferEncoding | null)): Promise<string | Buffer>}, lchown: {(path: PathLike, uid: number, gid: number): Promise<void>, (path: PathLike, uid: number, gid: number): Promise<void>}, lchmod: {(path: PathLike, mode: Mode): Promise<void>, (path: PathLike, mode: Mode): Promise<void>}, open: {(path: PathLike, flags?: (string | number), mode?: Mode): Promise<FileHandle>, (path: PathLike, flags?: (string | number), mode?: Mode): Promise<FileHandle>}}, TimeLike: string | number | Date, unwatchFile: {(filename: PathLike, listener?: StatsListener): void, (filename: PathLike, listener?: BigIntStatsListener): void}, futimes: {(fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, FSWatcher: FSWatcher, StatsFsBase: StatsFsBase, StatsBase: StatsBase, createReadStream(path: PathLike, options?: (BufferEncoding | ReadStreamOptions)): ReadStream, writeFileSync(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options?: WriteFileOptions): void, writeSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)): number, (fd: number, string: string, position?: (number | null), encoding?: (BufferEncoding | null)): number}, chownSync(path: PathLike, uid: number, gid: number): void, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, rm: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmOptions, callback: NoParamCallback): void}, copyFile: {(src: PathLike, dest: PathLike, callback: NoParamCallback): void, (src: PathLike, dest: PathLike, mode: number, callback: NoParamCallback): void}, WatchListener: (event: WatchEventType, filename: (T | null)) => void, access: {(path: PathLike, mode: (number | undefined), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, RmOptions: RmOptions, readdirSync: {(path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined} | BufferEncoding | null)): string[], (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Buffer[], (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): (string[] | Buffer[]), (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Dirent[]}, WriteVResult: WriteVResult, readdir: {(path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer"), callback: (err: (NodeJS.ErrnoException | null), files: Buffer[]) => void): void, (path: PathLike, options: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: (string[] | Buffer[])) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined}), callback: (err: (NodeJS.ErrnoException | null), files: Dirent[]) => void): void}, existsSync(path: PathLike): boolean, CopySyncOptions: CopySyncOptions, lchownSync(path: PathLike, uid: number, gid: number): void, readlinkSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, symlink: {(target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback): void, (target: PathLike, path: PathLike, callback: NoParamCallback): void}, Dirent: Dirent, fdatasyncSync(fd: number): void, fchmodSync(fd: number, mode: Mode): void, close: {(fd: number, callback?: NoParamCallback): void}, fdatasync: {(fd: number, callback: NoParamCallback): void}, realpathSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, stat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, fchmod: {(fd: number, mode: Mode, callback: NoParamCallback): void}, BigIntOptions: BigIntOptions, unlinkSync(path: PathLike): void, fstat: {(fd: number, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (fd: number, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, truncateSync(path: PathLike, len?: (number | null)): void, Dir: Dir, cp: {(source: (string | URL), destination: (string | URL), callback: (err: (NodeJS.ErrnoException | null)) => void): void, (source: (string | URL), destination: (string | URL), opts: CopyOptions, callback: (err: (NodeJS.ErrnoException | null)) => void): void}, statfsSync: {(path: PathLike, options?: (StatFsOptions & {bigint?: false | undefined})): StatsFs, (path: PathLike, options: (StatFsOptions & {bigint: true})): BigIntStatsFs, (path: PathLike, options?: StatFsOptions): (StatsFs | BigIntStatsFs)}, watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer"), listener?: WatchListener<Buffer>): FSWatcher, (filename: PathLike, options?: (WatchOptions | BufferEncoding | null), listener?: WatchListener<string>): FSWatcher, (filename: PathLike, options: (WatchOptions | string), listener?: WatchListener<string | Buffer>): FSWatcher, (filename: PathLike, listener?: WatchListener<string>): FSWatcher}, rename: {(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, readFile: {(path: PathOrFileDescriptor, options: (({encoding?: null | undefined, flag?: string | undefined} & Abortable) | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void, (path: PathOrFileDescriptor, options: (({encoding: BufferEncoding, flag?: string | undefined} & Abortable) | BufferEncoding), callback: (err: (NodeJS.ErrnoException | null), data: string) => void): void, (path: PathOrFileDescriptor, options: ((ObjectEncodingOptions & {flag?: string | undefined} & Abortable) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: (string | Buffer)) => void): void, (path: PathOrFileDescriptor, callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void}, StatFsOptions: StatFsOptions, exists: {(path: PathLike, callback: (exists: boolean) => void): void}, ftruncate: {(fd: number, len: (number | undefined | null), callback: NoParamCallback): void, (fd: number, callback: NoParamCallback): void}, WatchFileOptions: WatchFileOptions, open: {(path: PathLike, flags: (OpenMode | undefined), mode: (Mode | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, flags: (OpenMode | undefined), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void}, lchmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, statSync: StatSyncFn, StatsFs: StatsFs, WriteStream: WriteStream, BigIntStats: BigIntStats, readvSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number, EncodingOption: ObjectEncodingOptions | "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", closeSync(fd: number): void, PathOrFileDescriptor: string | Buffer | URL | number, renameSync(oldPath: PathLike, newPath: PathLike): void, WriteFileOptions: (ObjectEncodingOptions & Abortable & {mode?: Mode | undefined, flag?: string | undefined}) | "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", copyFileSync(src: PathLike, dest: PathLike, mode?: number): void, linkSync(existingPath: PathLike, newPath: PathLike): void, CopyOptions: CopyOptions, constants: constants, mkdirSync: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): (string | undefined), (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): void, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): (string | undefined)}, StatSyncFn: StatSyncFn, read: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (ReadPosition | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, options: ReadAsyncOptions<TBuffer>, callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void, (fd: number, callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: NodeJS.ArrayBufferView) => void): void}, chown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, StatOptions: StatOptions, opendirSync(path: PathLike, options?: OpenDirOptions): Dir, StatSyncOptions: StatSyncOptions, fsyncSync(fd: number): void, chmodSync(path: PathLike, mode: Mode): void, ReadVResult: ReadVResult, opendir: {(path: PathLike, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void, (path: PathLike, options: OpenDirOptions, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void}, Stats: Stats, fstatSync: {(fd: number, options?: (StatOptions & {bigint?: false | undefined})): Stats, (fd: number, options: (StatOptions & {bigint: true})): BigIntStats, (fd: number, options?: StatOptions): (Stats | BigIntStats)}, symlinkSync(target: PathLike, path: PathLike, type?: (symlink.Type | null)): void, appendFile: {(path: PathOrFileDescriptor, data: (string | Uint8Array), options: WriteFileOptions, callback: NoParamCallback): void, (file: PathOrFileDescriptor, data: (string | Uint8Array), callback: NoParamCallback): void}, readlink: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void}, BufferEncodingOption: "buffer" | {encoding: "buffer"}, rmSync(path: PathLike, options?: RmOptions): void, link: {(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, utimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, lchmodSync(path: PathLike, mode: Mode): void, rmdirSync(path: PathLike, options?: RmDirOptions): void, fsync: {(fd: number, callback: NoParamCallback): void}, RmDirOptions: RmDirOptions, watchFile: {(filename: PathLike, options: ((WatchFileOptions & {bigint?: false | undefined}) | undefined), listener: StatsListener): StatWatcher, (filename: PathLike, options: ((WatchFileOptions & {bigint: true}) | undefined), listener: BigIntStatsListener): StatWatcher, (filename: PathLike, listener: StatsListener): StatWatcher}, readv: {(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position: number, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void}, ReadStream: ReadStream, fchownSync(fd: number, uid: number, gid: number): void, chmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, writeFile: {(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options: WriteFileOptions, callback: NoParamCallback): void, (path: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), callback: NoParamCallback): void}, lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, MakeDirectoryOptions: MakeDirectoryOptions, ReadPosition: number | bigint, utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, lstat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, Mode: number | string, createWriteStream(path: PathLike, options?: (BufferEncoding | StreamOptions)): WriteStream, mkdtempSync: {(prefix: string, options?: EncodingOption): string, (prefix: string, options: BufferEncodingOption): Buffer, (prefix: string, options?: EncodingOption): (string | Buffer)}, cpSync(source: (string | URL), destination: (string | URL), opts?: CopySyncOptions): void, fchown: {(fd: number, uid: number, gid: number, callback: NoParamCallback): void}, appendFileSync(path: PathOrFileDescriptor, data: (string | Uint8Array), options?: WriteFileOptions): void, OpenDirOptions: OpenDirOptions, statfs: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: StatsFs) => void): void, (path: PathLike, options: ((StatFsOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: StatsFs) => void): void, (path: PathLike, options: (StatFsOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStatsFs) => void): void, (path: PathLike, options: (StatFsOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (StatsFs | BigIntStatsFs)) => void): void}, StatsListener: (curr: Stats, prev: Stats) => void, openSync(path: PathLike, flags: OpenMode, mode?: (Mode | null)): number, OpenMode: number | string, accessSync(path: PathLike, mode?: number): void, BigIntStatsFs: BigIntStatsFs, unlink: {(path: PathLike, callback: NoParamCallback): void}, futimesSync(fd: number, atime: TimeLike, mtime: TimeLike): void, writevSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number, lchown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, ftruncateSync(fd: number, len?: (number | null)): void, BigIntStatsListener: (curr: BigIntStats, prev: BigIntStats) => void, writev: {(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position: number, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void}} | {lutimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, realpath: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void}, readFileSync: {(path: PathOrFileDescriptor, options?: ({encoding?: null | undefined, flag?: string | undefined} | null)): Buffer, (path: PathOrFileDescriptor, options: ({encoding: BufferEncoding, flag?: string | undefined} | BufferEncoding)): string, (path: PathOrFileDescriptor, options?: ((ObjectEncodingOptions & {flag?: string | undefined}) | BufferEncoding | null)): (string | Buffer)}, ReadSyncOptions: ReadSyncOptions, rmdir: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmDirOptions, callback: NoParamCallback): void}, mkdtemp: {(prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void, (prefix: string, options: ("buffer" | {encoding: "buffer"}), callback: (err: (NodeJS.ErrnoException | null), folder: Buffer) => void): void, (prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: (string | Buffer)) => void): void, (prefix: string, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void}, ObjectEncodingOptions: ObjectEncodingOptions, WatchOptions: WatchOptions, StatWatcher: StatWatcher, ReadAsyncOptions: ReadAsyncOptions, lstatSync: StatSyncFn, truncate: {(path: PathLike, len: (number | undefined | null), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, PathLike: string | Buffer | URL, WatchEventType: "rename" | "change", readSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (ReadPosition | null)): number, (fd: number, buffer: NodeJS.ArrayBufferView, opts?: ReadSyncOptions): number}, write: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, (fd: number, string: string, position: (number | undefined | null), encoding: (BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void}, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true}), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, options: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null | undefined), callback: NoParamCallback): void, (path: PathLike, options: (Mode | MakeDirectoryOptions | null | undefined), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, callback: NoParamCallback): void}, promises: {lutimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>, (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>}, realpath: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}, FileHandle: FileHandle, FileReadResult: FileReadResult, rmdir: {(path: PathLike, options?: RmDirOptions): Promise<void>, (path: PathLike, options?: RmDirOptions): Promise<void>}, CreateWriteStreamOptions: CreateWriteStreamOptions, mkdtemp: {(prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (prefix: string, options: BufferEncodingOption): Promise<Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (prefix: string, options: BufferEncodingOption): Promise<Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}, truncate: {(path: PathLike, len?: number): Promise<void>, (path: PathLike, len?: number): Promise<void>}, FlagAndOpenMode: FlagAndOpenMode, constants: {F_OK: number, R_OK: number, W_OK: number, X_OK: number, COPYFILE_EXCL: number, COPYFILE_FICLONE: number, COPYFILE_FICLONE_FORCE: number, O_RDONLY: number, O_WRONLY: number, O_RDWR: number, O_CREAT: number, O_EXCL: number, O_NOCTTY: number, O_TRUNC: number, O_APPEND: number, O_DIRECTORY: number, O_NOATIME: number, O_NOFOLLOW: number, O_SYNC: number, O_DSYNC: number, O_SYMLINK: number, O_DIRECT: number, O_NONBLOCK: number, S_IFMT: number, S_IFREG: number, S_IFDIR: number, S_IFCHR: number, S_IFBLK: number, S_IFIFO: number, S_IFLNK: number, S_IFSOCK: number, S_IRWXU: number, S_IRUSR: number, S_IWUSR: number, S_IXUSR: number, S_IRWXG: number, S_IRGRP: number, S_IWGRP: number, S_IXGRP: number, S_IRWXO: number, S_IROTH: number, S_IWOTH: number, S_IXOTH: number, UV_FS_O_FILEMAP: number}, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): Promise<string | undefined>, (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): Promise<void>, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): Promise<string | undefined>, (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): Promise<string | undefined>, (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): Promise<void>, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): Promise<string | undefined>}, chown: {(path: PathLike, uid: number, gid: number): Promise<void>, (path: PathLike, uid: number, gid: number): Promise<void>}, opendir: {(path: PathLike, options?: OpenDirOptions): Promise<Dir>, (path: PathLike, options?: OpenDirOptions): Promise<Dir>}, rm: {(path: PathLike, options?: RmOptions): Promise<void>, (path: PathLike, options?: RmOptions): Promise<void>}, copyFile: {(src: PathLike, dest: PathLike, mode?: number): Promise<void>, (src: PathLike, dest: PathLike, mode?: number): Promise<void>}, appendFile: {(path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)): Promise<void>, (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)): Promise<void>}, access: {(path: PathLike, mode?: number): Promise<void>, (path: PathLike, mode?: number): Promise<void>}, readlink: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | string | null)): Promise<string | Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | string | null)): Promise<string | Buffer>}, CreateReadStreamOptions: CreateReadStreamOptions, link: {(existingPath: PathLike, newPath: PathLike): Promise<void>, (existingPath: PathLike, newPath: PathLike): Promise<void>}, utimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>, (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>}, readdir: {(path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[]>, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Promise<Buffer[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[] | Buffer[]>, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Promise<Dirent[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[]>, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Promise<Buffer[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[] | Buffer[]>, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Promise<Dirent[]>}, symlink: {(target: PathLike, path: PathLike, type?: (string | null)): Promise<void>, (target: PathLike, path: PathLike, type?: (string | null)): Promise<void>}, chmod: {(path: PathLike, mode: Mode): Promise<void>, (path: PathLike, mode: Mode): Promise<void>}, writeFile: {(file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)): Promise<void>, (file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)): Promise<void>}, FileReadOptions: FileReadOptions, stat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>, (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, lstat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>, (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, statfs: {(path: PathLike, opts?: (StatFsOptions & {bigint?: false | undefined})): Promise<StatsFs>, (path: PathLike, opts: (StatFsOptions & {bigint: true})): Promise<BigIntStatsFs>, (path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>, (path: PathLike, opts?: (StatFsOptions & {bigint?: false | undefined})): Promise<StatsFs>, (path: PathLike, opts: (StatFsOptions & {bigint: true})): Promise<BigIntStatsFs>, (path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>}, cp: {(source: (string | URL), destination: (string | URL), opts?: CopyOptions): Promise<void>, (source: (string | URL), destination: (string | URL), opts?: CopyOptions): Promise<void>}, FileChangeInfo: FileChangeInfo, unlink: {(path: PathLike): Promise<void>, (path: PathLike): Promise<void>}, watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")): AsyncIterable<FileChangeInfo<Buffer>>, (filename: PathLike, options?: (WatchOptions | BufferEncoding)): AsyncIterable<FileChangeInfo<string>>, (filename: PathLike, options: (WatchOptions | string)): (AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>), (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")): AsyncIterable<FileChangeInfo<Buffer>>, (filename: PathLike, options?: (WatchOptions | BufferEncoding)): AsyncIterable<FileChangeInfo<string>>, (filename: PathLike, options: (WatchOptions | string)): (AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>)}, rename: {(oldPath: PathLike, newPath: PathLike): Promise<void>, (oldPath: PathLike, newPath: PathLike): Promise<void>}, readFile: {(path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)): Promise<Buffer>, (path: (PathLike | FileHandle), options: (({encoding: BufferEncoding, flag?: OpenMode | undefined} & Abortable) | BufferEncoding)): Promise<string>, (path: (PathLike | FileHandle), options?: ((ObjectEncodingOptions & Abortable & {flag?: OpenMode | undefined}) | BufferEncoding | null)): Promise<string | Buffer>, (path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)): Promise<Buffer>, (path: (PathLike | FileHandle), options: (({encoding: BufferEncoding, flag?: OpenMode | undefined} & Abortable) | BufferEncoding)): Promise<string>, (path: (PathLike | FileHandle), options?: ((ObjectEncodingOptions & Abortable & {flag?: OpenMode | undefined}) | BufferEncoding | null)): Promise<string | Buffer>}, lchown: {(path: PathLike, uid: number, gid: number): Promise<void>, (path: PathLike, uid: number, gid: number): Promise<void>}, lchmod: {(path: PathLike, mode: Mode): Promise<void>, (path: PathLike, mode: Mode): Promise<void>}, open: {(path: PathLike, flags?: (string | number), mode?: Mode): Promise<FileHandle>, (path: PathLike, flags?: (string | number), mode?: Mode): Promise<FileHandle>}}, TimeLike: string | number | Date, unwatchFile: {(filename: PathLike, listener?: StatsListener): void, (filename: PathLike, listener?: BigIntStatsListener): void}, futimes: {(fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, FSWatcher: FSWatcher, StatsFsBase: StatsFsBase, StatsBase: StatsBase, createReadStream(path: PathLike, options?: (BufferEncoding | ReadStreamOptions)): ReadStream, writeFileSync(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options?: WriteFileOptions): void, writeSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)): number, (fd: number, string: string, position?: (number | null), encoding?: (BufferEncoding | null)): number}, chownSync(path: PathLike, uid: number, gid: number): void, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, rm: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmOptions, callback: NoParamCallback): void}, copyFile: {(src: PathLike, dest: PathLike, callback: NoParamCallback): void, (src: PathLike, dest: PathLike, mode: number, callback: NoParamCallback): void}, WatchListener: (event: WatchEventType, filename: (T | null)) => void, access: {(path: PathLike, mode: (number | undefined), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, RmOptions: RmOptions, readdirSync: {(path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined} | BufferEncoding | null)): string[], (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Buffer[], (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): (string[] | Buffer[]), (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Dirent[]}, WriteVResult: WriteVResult, readdir: {(path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer"), callback: (err: (NodeJS.ErrnoException | null), files: Buffer[]) => void): void, (path: PathLike, options: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: (string[] | Buffer[])) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined}), callback: (err: (NodeJS.ErrnoException | null), files: Dirent[]) => void): void}, existsSync(path: PathLike): boolean, CopySyncOptions: CopySyncOptions, lchownSync(path: PathLike, uid: number, gid: number): void, readlinkSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, symlink: {(target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback): void, (target: PathLike, path: PathLike, callback: NoParamCallback): void}, Dirent: Dirent, fdatasyncSync(fd: number): void, fchmodSync(fd: number, mode: Mode): void, close: {(fd: number, callback?: NoParamCallback): void}, fdatasync: {(fd: number, callback: NoParamCallback): void}, realpathSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, stat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, fchmod: {(fd: number, mode: Mode, callback: NoParamCallback): void}, BigIntOptions: BigIntOptions, unlinkSync(path: PathLike): void, fstat: {(fd: number, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (fd: number, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, truncateSync(path: PathLike, len?: (number | null)): void, Dir: Dir, cp: {(source: (string | URL), destination: (string | URL), callback: (err: (NodeJS.ErrnoException | null)) => void): void, (source: (string | URL), destination: (string | URL), opts: CopyOptions, callback: (err: (NodeJS.ErrnoException | null)) => void): void}, statfsSync: {(path: PathLike, options?: (StatFsOptions & {bigint?: false | undefined})): StatsFs, (path: PathLike, options: (StatFsOptions & {bigint: true})): BigIntStatsFs, (path: PathLike, options?: StatFsOptions): (StatsFs | BigIntStatsFs)}, watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer"), listener?: WatchListener<Buffer>): FSWatcher, (filename: PathLike, options?: (WatchOptions | BufferEncoding | null), listener?: WatchListener<string>): FSWatcher, (filename: PathLike, options: (WatchOptions | string), listener?: WatchListener<string | Buffer>): FSWatcher, (filename: PathLike, listener?: WatchListener<string>): FSWatcher}, rename: {(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, readFile: {(path: PathOrFileDescriptor, options: (({encoding?: null | undefined, flag?: string | undefined} & Abortable) | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void, (path: PathOrFileDescriptor, options: (({encoding: BufferEncoding, flag?: string | undefined} & Abortable) | BufferEncoding), callback: (err: (NodeJS.ErrnoException | null), data: string) => void): void, (path: PathOrFileDescriptor, options: ((ObjectEncodingOptions & {flag?: string | undefined} & Abortable) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: (string | Buffer)) => void): void, (path: PathOrFileDescriptor, callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void}, StatFsOptions: StatFsOptions, exists: {(path: PathLike, callback: (exists: boolean) => void): void}, ftruncate: {(fd: number, len: (number | undefined | null), callback: NoParamCallback): void, (fd: number, callback: NoParamCallback): void}, WatchFileOptions: WatchFileOptions, open: {(path: PathLike, flags: (OpenMode | undefined), mode: (Mode | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, flags: (OpenMode | undefined), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void}, lchmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, statSync: StatSyncFn, StatsFs: StatsFs, WriteStream: WriteStream, BigIntStats: BigIntStats, readvSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number, EncodingOption: ObjectEncodingOptions | "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", closeSync(fd: number): void, PathOrFileDescriptor: string | Buffer | URL | number, renameSync(oldPath: PathLike, newPath: PathLike): void, WriteFileOptions: (ObjectEncodingOptions & Abortable & {mode?: Mode | undefined, flag?: string | undefined}) | "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", copyFileSync(src: PathLike, dest: PathLike, mode?: number): void, linkSync(existingPath: PathLike, newPath: PathLike): void, CopyOptions: CopyOptions, constants: constants, mkdirSync: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): (string | undefined), (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): void, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): (string | undefined)}, StatSyncFn: StatSyncFn, read: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (ReadPosition | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, options: ReadAsyncOptions<TBuffer>, callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void, (fd: number, callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: NodeJS.ArrayBufferView) => void): void}, chown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, StatOptions: StatOptions, opendirSync(path: PathLike, options?: OpenDirOptions): Dir, StatSyncOptions: StatSyncOptions, fsyncSync(fd: number): void, chmodSync(path: PathLike, mode: Mode): void, ReadVResult: ReadVResult, opendir: {(path: PathLike, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void, (path: PathLike, options: OpenDirOptions, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void}, Stats: Stats, fstatSync: {(fd: number, options?: (StatOptions & {bigint?: false | undefined})): Stats, (fd: number, options: (StatOptions & {bigint: true})): BigIntStats, (fd: number, options?: StatOptions): (Stats | BigIntStats)}, symlinkSync(target: PathLike, path: PathLike, type?: (symlink.Type | null)): void, appendFile: {(path: PathOrFileDescriptor, data: (string | Uint8Array), options: WriteFileOptions, callback: NoParamCallback): void, (file: PathOrFileDescriptor, data: (string | Uint8Array), callback: NoParamCallback): void}, readlink: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void}, BufferEncodingOption: "buffer" | {encoding: "buffer"}, rmSync(path: PathLike, options?: RmOptions): void, link: {(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, utimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, lchmodSync(path: PathLike, mode: Mode): void, rmdirSync(path: PathLike, options?: RmDirOptions): void, fsync: {(fd: number, callback: NoParamCallback): void}, RmDirOptions: RmDirOptions, watchFile: {(filename: PathLike, options: ((WatchFileOptions & {bigint?: false | undefined}) | undefined), listener: StatsListener): StatWatcher, (filename: PathLike, options: ((WatchFileOptions & {bigint: true}) | undefined), listener: BigIntStatsListener): StatWatcher, (filename: PathLike, listener: StatsListener): StatWatcher}, readv: {(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position: number, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void}, ReadStream: ReadStream, fchownSync(fd: number, uid: number, gid: number): void, chmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, writeFile: {(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options: WriteFileOptions, callback: NoParamCallback): void, (path: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), callback: NoParamCallback): void}, lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, MakeDirectoryOptions: MakeDirectoryOptions, ReadPosition: number | bigint, utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, lstat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, Mode: number | string, createWriteStream(path: PathLike, options?: (BufferEncoding | StreamOptions)): WriteStream, mkdtempSync: {(prefix: string, options?: EncodingOption): string, (prefix: string, options: BufferEncodingOption): Buffer, (prefix: string, options?: EncodingOption): (string | Buffer)}, cpSync(source: (string | URL), destination: (string | URL), opts?: CopySyncOptions): void, fchown: {(fd: number, uid: number, gid: number, callback: NoParamCallback): void}, appendFileSync(path: PathOrFileDescriptor, data: (string | Uint8Array), options?: WriteFileOptions): void, OpenDirOptions: OpenDirOptions, statfs: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: StatsFs) => void): void, (path: PathLike, options: ((StatFsOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: StatsFs) => void): void, (path: PathLike, options: (StatFsOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStatsFs) => void): void, (path: PathLike, options: (StatFsOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (StatsFs | BigIntStatsFs)) => void): void}, StatsListener: (curr: Stats, prev: Stats) => void, openSync(path: PathLike, flags: OpenMode, mode?: (Mode | null)): number, OpenMode: number | string, accessSync(path: PathLike, mode?: number): void, BigIntStatsFs: BigIntStatsFs, unlink: {(path: PathLike, callback: NoParamCallback): void}, futimesSync(fd: number, atime: TimeLike, mtime: TimeLike): void, writevSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number, lchown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, ftruncateSync(fd: number, len?: (number | null)): void, BigIntStatsListener: (curr: BigIntStats, prev: BigIntStats) => void, writev: {(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position: number, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void}}}
 */
const fs = require('fs')
const path = require('path')
let argv = process.argv
/**
 *
 * @param text 文本
 * @param path
 * @param isWarn 是否警告
 */
const myLog = function (text, path, isWarn = false) {
    /*var black="\033[30m black \033[0m";
  var red="\033[31m red \033[0m";
  var green="\033[32m green \033[0m";
  var yellow="\033[33m yellow78979 \033[0m";
  var blue="\033[34m blue \033[0m";
  var popurse="\033[35m popurse \033[0m";
  var indigo="\033[36m indigo \033[0m";
  var white="\033[37m white \033[0m";
  var mix="\033[37;42m white \033[0m";
  console.log(black, red, green, yellow, blue, popurse, white);*/
    var popurse = "\033[35m 提示 \033[0m";
    var warn = "\033[33m 警告 \033[0m";
    let hint = isWarn === true ? warn : popurse
    process.stdout.write(hint);
    var toolPathhint = "\033[31m " + text + " \033[0m";
    var toolPathPath = "\033[32m" + path + " \033[0m";
    console.log(toolPathhint, toolPathPath);
};

/**
 * 删除入口文件中的导出语句
 * @param toolsPath  文件路径
 * @returns {void} 直接写入文件
 */
function delTools(toolsPath) {
    // 处理输入的路径
    let toolsPathArr = "./" + toolsPath.replace('.', '/')
//    获取 入口文件  数据
    let indexPath = path.join(__dirname, '../src/index.ts')
    let indexData = fs.readFileSync(indexPath, 'utf-8')
    const exportRegex = /export \* from ['"](.*?)['"]/g; // 导出语句的正则表达式
    let newCode = indexData; // 新代码
    let match;

    while (match = exportRegex.exec(indexData)) { // 遍历所有的导出语句
        // console.log('match',match)
        const exportPath = match[1]; // 获取当前导出语句中的路径
        // console.log('exportPath', exportPath, toolsPath)
        if (exportPath === toolsPathArr) { // 如果匹配到需要删除的路径

            newCode = newCode.replace(match[0], ''); // 删除该导出语句
        }
    }
// 将输入写入文件
    fs.writeFileSync(indexPath, newCode);
    myLog('导出入口修改成功', indexPath)

}


/**
 * 删除工具文件夹
 * @param toolsPath 文件路径
 */
function delFile(toolsPath) {
    let dotIndx = toolsPath.indexOf('.')
    let partitionIndex = dotIndx > -1 ? dotIndx : toolsPath.indexOf('/')
    let moduleName = toolsPath.slice(0, partitionIndex)
    let toolName = toolsPath.slice(partitionIndex + 1)
    // 模块路径
    let modulePath = path.join(__dirname, '../src', moduleName)
    // 工具路径
    let toolPath = path.join(modulePath, toolName)
    // 删除文件
    fs.unlink(path.join(toolPath, 'index.ts'), (err) => {
        if (err) {
            myLog('工具删除失败', path.join(toolPath, 'index.ts'), true)
            return
        }
        myLog('工具删除成功', path.join(toolPath, 'index.ts'))
        //     删除文件夹
        fs.rmdir(toolPath, (err) => {
            if (err) {
                myLog('工具文件夹未成功删除', toolPath, true)
                return
            }
            myLog('工具文件夹已成功删除', toolPath)
            //     删除文件夹
            fs.rmdir(modulePath, (err) => {
                if (err) {
                    myLog('模块文件夹未成功删除', modulePath, true)
                    return
                }
                myLog('模块文件夹已成功删除', modulePath)
            });
        });
    });


}

/**
 * 删除测试文件夹
 * @param toolsPath 文件路径
 */
function delTestFile(toolsPath) {
    let dotIndx = toolsPath.indexOf('.')
    let partitionIndex = dotIndx > -1 ? dotIndx : toolsPath.indexOf('/')
    let moduleName = toolsPath.slice(0, partitionIndex)
    let toolName = toolsPath.slice(partitionIndex + 1)
    // 模块路径
    let modulePath = path.join(__dirname, '../test', moduleName)
    // 工具路径
    let toolPath = path.join(modulePath, toolName)
    // 判断模块是否存在
    const isModule = fs.existsSync(modulePath);
    if (!isModule) {
        myLog('模块不存在', modulePath)

    } else {
        //     工具是否存在
        const isTool = fs.existsSync(toolPath);
        if (!isTool) {
            myLog('工具测试文件不存在', toolPath)

        } else {
            // 删除文件
            fs.unlink(path.join(toolPath, `${toolName}.test.js`), (err) => {
                if (err) {
                    myLog('工具测试文件删除失败', path.join(toolPath, `${toolName}.test.js`), true)
                    return
                }

                // console.log('工具删除成功');
                myLog('工具测试文件删除成功', path.join(toolPath, `${toolName}.test.js`))
            });
//     删除文件夹
            fs.rmdir(toolPath, (err) => {
                if (err) {
                    myLog('工具文件夹未成功删除', toolPath, true)
                    return
                }

                // console.log('工具文件夹已成功删除');
                myLog('工具测试文件夹已成功删除', toolPath)
                //     删除文件夹
                fs.rmdir(modulePath, (err) => {
                    if (err) {
                        myLog('测试模块文件夹未成功删除', modulePath, true)
                        return
                    }

                    // console.log('模块文件夹已成功删除')
                    myLog('测试模块文件夹已成功删除', modulePath)
                });
            });

        }
    }

}

delTools(argv[2])
delFile(argv[2])
delTestFile(argv[2])